#!/usr/bin/env ruby
require 'json'
require 'pathname'

module Component
  def self.reinstall_all
    packages = Dir['./components/*'].map { |p| p.split("/")[-1] }
    packages.each &method(:install)
  end

  def self.install(package)
    path = "./components/" + package

    puts " "
    puts "Installing #{package}"
    puts "- Running: bower install #{package}"
    `bower install #{package}`
    json = JSON.parse(File.read("#{path}/component.json"))

    filename = json['main']

    if !filename
      puts "No main file found in component.json for #{package}" unless filename
    else
      main_filename = File.join(".", "components", package, filename)
      Component.copy_component_file(main_filename)
    end
  end

  def self.copy_component_file(filename)
    if File.exist?(filename)
      file_path = Pathname.new(File.dirname(filename))
      components = Pathname.new('./components')

      component_name = file_path.relative_path_from(components).to_s.split("/")[0]
      component_file_name = File.basename(filename)
      new_component_dir_path = File.join("source", "javascripts", "components", component_name)

      `mkdir -p #{new_component_dir_path}`
      puts "- Copying main file #{filename} to #{new_component_dir_path}"
      `cp #{filename} #{new_component_dir_path}`

      Component.write_require_to_components(File.join("components", component_name, component_file_name))
    else
      puts "Cannot find #{filename}"
    end
  end

  def self.write_require_to_components(require_path)
    components_js_file = "./source/javascripts/components.js"
    
    if File.exist?(components_js_file)
      lines = File.readlines(components_js_file)
      puts "- Adding #{require_path} to components.js"
      if lines.any? { |line| line[ require_path ] }
        puts "- Error: it looks like this file is already in the components.js file"
        return
      end
    end
    `echo "//=require #{require_path}" >> #{components_js_file}`
  end
end

case ARGV[0]
when 'install' then ARGV[1..-1].each &Component.method(:install)
when 'copy' then ARGV[1..-1].each &Component.method(:copy_component_file)
when 'reinstall' then Component.reinstall_all
end
